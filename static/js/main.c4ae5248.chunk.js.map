{"version":3,"sources":["js/components/ProjectPopup.js","js/components/ProjectCard.js","js/components/RowProjectCard.js","js/components/CreateProjectForm.js","js/components/Filter.js","js/components/SideBar.js","js/components/App.js","js/other/serviceWorker.js","index.js"],"names":["ProjectPopup","props","state","className","type","dataToggle","dataTarget","id","dataDismiss","Component","ProjectCard","RowProjectCard","Example","handleChangeName","event","setState","name","target","value","description","handleChangeDescription","bind","this","class","for","placeholder","onChange","required","Filter","SideBar","App","CreateProjectForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4ae5248.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\n\r\n// Things to consider\r\n\r\n//  - use className instead of class\r\n//  - self closing tag must be closed with a slash\r\n//     - example: <img />\r\n//  - this is not html, it is jsx\r\n//  - all styles must follow camelCase format\r\n//     - background-color becomes backgroundColor\r\n//     - onclick becomes onClick\r\n//  - you can use {} inside of attributes and text nodes\r\n//     - inside the curly you can put any js expressions\r\n//  - You can add example image using this link\r\n//     - https://picsum.photos/width/height\r\n//     - Be sure to change the width and height\r\n\r\nclass ProjectPopup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    // any method using this keyword must bind\r\n    // example: this.method = this.method.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Things to do when the component is first rendered into the dom\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Things to do when the component is removed\r\n  }\r\n\r\n  render() {\r\n    let modalClass = \"modal fade \";\r\n\r\n    return (\r\n      <div className=\"ProjectPopup\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary\"\r\n          dataToggle=\"modal\"\r\n          dataTarget=\"#myModal\"\r\n        >\r\n          Click on this\r\n        </button>\r\n        <div className=\"modal fade\" id=\"myModal\">\r\n          <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h4 className=\"modal-title\">Idea Name</h4>\r\n                <button type=\"button\" className=\"close\" dataDismiss=\"modal\">\r\n                  &times;\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">Modal body..</div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary btn-danger\"\r\n                  dataDismiss=\"modal\"\r\n                >\r\n                  Close\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary btn-Primary\"\r\n                  dataDismiss=\"modal\"\r\n                >\r\n                  Join the slack Now\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectPopup;\r\n","import React, { Component } from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\nimport ProjectPopup from \"./ProjectPopup\";\r\n\r\n// Things to consider\r\n\r\n//  - use className instead of class\r\n//  - self closing tag must be closed with a slash\r\n//     - example: <img />\r\n//  - this is not html, it is jsx\r\n//  - all styles must follow camelCase format\r\n//     - background-color becomes backgroundColor\r\n//     - onclick becomes onClick\r\n//  - you can use {} inside of attributes and text nodes\r\n//     - inside the curly you can put any js expressions\r\n//  - You can add example image using this link\r\n//     - https://picsum.photos/width/height\r\n//     - Be sure to change the width and height\r\n\r\n//<img src=\"...\" className=\"card-img-top\" alt=\"...\"></img>\r\n\r\nclass ProjectCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    // any method using this keyword must bind\r\n    // example: this.method = this.method.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Things to do when the component is first rendered into the dom\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Things to do when the component is removed\r\n  }\r\n\r\n  handlePopup() {}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ProjectCard\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">Idea Name</h5>\r\n            <p className=\"card-text\">\r\n              This is something i want to work if you like it let's code!\r\n            </p>\r\n            <ProjectPopup />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectCard;\r\n","import React, { Component } from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\nimport ProjectCard from \"./ProjectCard\";\r\n\r\n// Things to consider\r\n\r\n//  - use className instead of class\r\n//  - self closing tag must be closed with a slash\r\n//     - example: <img />\r\n//  - this is not html, it is jsx\r\n//  - all styles must follow camelCase format\r\n//     - background-color becomes backgroundColor\r\n//     - onclick becomes onClick\r\n//  - you can use {} inside of attributes and text nodes\r\n//     - inside the curly you can put any js expressions\r\n//  - You can add example image using this link\r\n//     - https://picsum.photos/width/height\r\n//     - Be sure to change the width and height\r\n\r\nclass RowProjectCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    // any method using this keyword must bind\r\n    // example: this.method = this.method.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Things to do when the component is first rendered into the dom\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Things to do when the component is removed\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"RowProjectCard\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm mx-2\">\r\n            <ProjectCard />\r\n          </div>\r\n          <div className=\"col-sm mx-2\">\r\n            <ProjectCard />\r\n          </div>\r\n          <div className=\"col-sm mx-2\">\r\n            <ProjectCard />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RowProjectCard;\r\n","import React, { Component } from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\n\r\n// Things to consider\r\n\r\n//  - use className instead of class\r\n//  - self closing tag must be closed with a slash\r\n//     - example: <img />\r\n//  - this is not html, it is jsx\r\n//  - all styles must follow camelCase format\r\n//     - background-color becomes backgroundColor\r\n//     - onclick becomes onClick\r\n//  - you can use {} inside of attributes and text nodes\r\n//     - inside the curly you can put any js expressions\r\n//  - You can add example image using this link\r\n//     - https://picsum.photos/width/height\r\n//     - Be sure to change the width and height\r\n\r\nclass Example extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      description: \"\",\r\n    };\r\n    this.handleChangeName = this.handleChangeName.bind(this);\r\n    this.handleChangeDescription = this.handleChangeDescription.bind(this);\r\n    // any method using this keyword must bind\r\n    // example: this.method = this.method.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Things to do when the component is first rendered into the dom\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Things to do when the component is removed\r\n  }\r\n\r\n  handleChangeName = (event) => {\r\n    this.setState({\r\n      name: event.target.value,\r\n      description: this.state.description,\r\n    });\r\n  };\r\n\r\n  handleChangeDescription = (event) => {\r\n    this.setState({ name: this.state.name, description: event.target.value });\r\n  };\r\n\r\n  ha;\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Example\">\r\n        <h3>Name: {this.state.name}</h3>\r\n        <h3>Description: {this.state.description}</h3>\r\n        <form className=\"form my-4\">\r\n          <div class=\"form-group\">\r\n            <label for=\"pname\">Project Name:</label>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              placeholder=\"Enter Project Name\"\r\n              name=\"pname\"\r\n              onChange={this.handleChangeName}\r\n              required\r\n            />\r\n            <div class=\"valid-feedback\">Valid.</div>\r\n            <div class=\"invalid-feedback\">Please fill out this field.</div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"pdescription\">Project Description:</label>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              placeholder=\"Enter Project Description\"\r\n              name=\"pdescription\"\r\n              onChange={this.handleChangeDescription}\r\n              required\r\n            />\r\n            <div class=\"valid-feedback\">Valid.</div>\r\n            <div class=\"invalid-feedback\">Please fill out this field.</div>\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;\r\n","import React, { Component } from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\n\r\n// Things to consider\r\n\r\n//  - use className instead of class\r\n//  - self closing tag must be closed with a slash\r\n//     - example: <img />\r\n//  - this is not html, it is jsx\r\n//  - all styles must follow camelCase format\r\n//     - background-color becomes backgroundColor\r\n//     - onclick becomes onClick\r\n//  - you can use {} inside of attributes and text nodes\r\n//     - inside the curly you can put any js expressions\r\n//  - You can add example image using this link\r\n//     - https://picsum.photos/width/height\r\n//     - Be sure to change the width and height\r\n\r\nclass Filter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    // any method using this keyword must bind\r\n    // example: this.method = this.method.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Things to do when the component is first rendered into the dom\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Things to do when the component is removed\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Filter\">\r\n        <h1>Example</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\n\r\n// Things to consider\r\n\r\n//  - use className instead of class\r\n//  - self closing tag must be closed with a slash\r\n//     - example: <img />\r\n//  - this is not html, it is jsx\r\n//  - all styles must follow camelCase format\r\n//     - background-color becomes backgroundColor\r\n//     - onclick becomes onClick\r\n//  - you can use {} inside of attributes and text nodes\r\n//     - inside the curly you can put any js expressions\r\n//  - You can add example image using this link\r\n//     - https://picsum.photos/width/height\r\n//     - Be sure to change the width and height\r\n\r\nclass SideBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    // any method using this keyword must bind\r\n    // example: this.method = this.method.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Things to do when the component is first rendered into the dom\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Things to do when the component is removed\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SideBar\">\r\n        <h1>Example</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { Component } from \"react\";\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../../css/frameworks/normalize.css\";\nimport \"../../css/components/App.css\";\nimport RowProjectCard from \"./RowProjectCard\";\nimport CreateProjectForm from \"./CreateProjectForm\";\nimport Filter from \"./Filter\";\nimport SideBar from \"./SideBar\";\n\n// To Do: change the github page link to a link you want\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n          <CreateProjectForm />\n          <RowProjectCard />\n          <Filter />\n          <SideBar />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./css/frameworks/normalize.css\";\nimport \"./css/webpages/index.css\";\nimport App from \"./js/components/App\";\nimport * as serviceWorker from \"./js/other/serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}